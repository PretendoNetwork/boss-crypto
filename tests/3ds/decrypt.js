const assert = require('node:assert');
const { decrypt3DS } = require('../..');

require('dotenv').config();

const { BOSS_3DS_AES_KEY } = process.env;

const expected = {
	hash_type: 2,
	serial_number: 1692231927n,
	iv: Buffer.from('00000000000000000000000000000001', 'hex'),
	flags: 0n,
	content_header_hash: Buffer.from('5cd5d8198b7ce64edc796c147f333a76c3714269066504c9232f28cabe4306db', 'hex'),
	content_header_hash_signature: Buffer.from('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'hex'),
	payload_contents_length: 1,
	payload_content_header_hash: Buffer.from('e3403f8fcd420e9fa3e8524779edfa5b08ba316be5d377e42e71e6cdcdf03207', 'hex'),
	payload_content_header_hash_signature: Buffer.from('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'hex'),
	program_id: 1125968626460928n,
	content_datatype: 65537,
	ns_data_id: 36,
	content: Buffer.from('48656c6c6f20576f726c64', 'hex')
};

const encrypted = Buffer.from([
	0x62, 0x6F, 0x73, 0x73, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0xA1, 0x00, 0x00, 0x00, 0x00,
	0x64, 0xDD, 0x68, 0xF7, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x06, 0x07, 0x0A, 0x85, 0xC5, 0x41, 0xDF,
	0x89, 0xF9, 0xA6, 0x57, 0x41, 0x63, 0x13, 0x0C, 0x6E, 0x4A, 0x56, 0xE1, 0xC3, 0x04, 0x18, 0x82,
	0xCE, 0x0F, 0xD4, 0x5F, 0xDF, 0x03, 0x67, 0x4B, 0xF9, 0x83, 0x74, 0x41, 0xD8, 0xC3, 0x07, 0x76,
	0xB0, 0xE0, 0x98, 0xCF, 0x87, 0xC0, 0xB1, 0xDB, 0x78, 0xE3, 0x7D, 0x38, 0x1E, 0x20, 0x63, 0xC1,
	0xCE, 0xB1, 0x43, 0x50, 0xE9, 0x66, 0x5F, 0xAA, 0xAA, 0x5F, 0x9B, 0x45, 0x2D, 0x46, 0x09, 0x6A,
	0x72, 0x00, 0xD3, 0x5B, 0xBA, 0x03, 0x80, 0xE8, 0x84, 0xE1, 0x85, 0xC0, 0xF9, 0x90, 0x27, 0xFE,
	0x58, 0x3C, 0xB7, 0x12, 0x78, 0xED, 0x8D, 0x61, 0x5D, 0xF0, 0xDB, 0xB8, 0x41, 0x6E, 0x79, 0x87,
	0x51, 0x5E, 0x58, 0xA4, 0x45, 0x77, 0x17, 0x9D, 0x52, 0x78, 0xDC, 0xD7, 0x82, 0xD6, 0xC7, 0x8A,
	0xF3, 0x00, 0x81, 0x2D, 0x89, 0x67, 0xE5, 0xD6, 0x53, 0x57, 0x33, 0xA4, 0xD0, 0x96, 0x5F, 0x09,
	0x23, 0xF5, 0xDB, 0xC4, 0xE9, 0xBE, 0xE0, 0x68, 0xBD, 0xF4, 0x81, 0xCA, 0x3B, 0x47, 0xFB, 0x7D,
	0xB4, 0x79, 0xBE, 0xF5, 0xD5, 0xBD, 0xF7, 0xC3, 0x3A, 0x99, 0x5A, 0x08, 0x3D, 0x07, 0xEE, 0x05,
	0x23, 0x9E, 0x9B, 0xD6, 0x04, 0x94, 0x54, 0x94, 0x03, 0xF5, 0xF1, 0x98, 0x63, 0x73, 0x59, 0x76,
	0xC6, 0xFA, 0x2E, 0x7A, 0xB2, 0xCC, 0x99, 0xB3, 0x4D, 0xF4, 0x93, 0x06, 0x0F, 0xD2, 0x4D, 0xAC,
	0xE8, 0xDA, 0xE4, 0x84, 0xC9, 0x1D, 0xE7, 0xFA, 0xD9, 0x6A, 0x3C, 0xFB, 0x47, 0x48, 0x56, 0xB2,
	0xF9, 0x8A, 0x31, 0x98, 0xED, 0xEB, 0x05, 0xDC, 0x85, 0x2D, 0x38, 0x11, 0xC7, 0xD4, 0xF3, 0xF6,
	0xCA, 0x40, 0xA6, 0x3D, 0x9F, 0xC8, 0x94, 0x9F, 0x11, 0xD6, 0x4C, 0x74, 0x02, 0x65, 0xCB, 0x74,
	0x2C, 0xE7, 0x6F, 0x30, 0x05, 0x71, 0x9B, 0x12, 0x3B, 0x0B, 0x37, 0xF2, 0x6A, 0x11, 0x4D, 0x38,
	0x18, 0x5E, 0xA1, 0xAD, 0x01, 0x8D, 0xD7, 0x79, 0xCD, 0x93, 0xC4, 0x4D, 0xEF, 0x23, 0xA6, 0x57,
	0x18, 0xA8, 0x2C, 0xE2, 0xE9, 0xB6, 0xB2, 0x56, 0x9F, 0xBA, 0xC2, 0x29, 0x5D, 0x30, 0xEB, 0xF6,
	0x1D, 0xED, 0xFE, 0xDD, 0x93, 0xE2, 0x4E, 0x82, 0x62, 0x97, 0x58, 0x6D, 0x41, 0xBD, 0xDB, 0x66,
	0xE0, 0x5D, 0x78, 0x5D, 0x31, 0xCA, 0x83, 0x3D, 0x2E, 0x04, 0xB0, 0xD3, 0x72, 0xEA, 0xB1, 0x2A,
	0x0B, 0x8B, 0xF9, 0xEC, 0xCD, 0x47, 0xC0, 0x06, 0x81, 0x10, 0x82, 0x1F, 0xA1, 0xFA, 0xBF, 0x59,
	0xFE, 0xEA, 0x7E, 0x99, 0xD1, 0xEC, 0xF8, 0xD4, 0x7E, 0x42, 0xA6, 0x34, 0x9B, 0xD1, 0x25, 0x06,
	0xA0, 0x65, 0x59, 0x75, 0x47, 0x42, 0x8B, 0xA9, 0xF4, 0xC3, 0x9B, 0xD8, 0x22, 0x20, 0x2F, 0x95,
	0xD7, 0xB9, 0x58, 0x52, 0x8E, 0x21, 0xE9, 0x4F, 0x47, 0xBC, 0x75, 0x64, 0x04, 0xAD, 0xD6, 0x6B,
	0xCB, 0x54, 0xB1, 0x07, 0xC1, 0x46, 0xAD, 0x23, 0x94, 0xAA, 0xA5, 0xCB, 0xCE, 0x5F, 0xF5, 0xF7,
	0x01, 0x49, 0x9C, 0x7E, 0x80, 0x78, 0x83, 0x65, 0x26, 0x4F, 0x2C, 0xF4, 0x2E, 0x5B, 0xF2, 0x60,
	0x02, 0xDA, 0x55, 0xF3, 0xEA, 0xD8, 0x4B, 0xE9, 0x3D, 0x6E, 0xDF, 0x19, 0xA1, 0xB1, 0xA1, 0xEC,
	0xF0, 0x2D, 0x62, 0x7B, 0xEF, 0x2D, 0x26, 0x1E, 0xE9, 0x58, 0xC5, 0xF3, 0xCE, 0x99, 0xF4, 0x83,
	0x4F, 0x93, 0x15, 0x88, 0xD7, 0x27, 0x48, 0xAD, 0xD9, 0x85, 0xF9, 0xF4, 0x58, 0x44, 0xDE, 0x3A,
	0xB0, 0x49, 0x5C, 0xF0, 0x72, 0xBE, 0xA0, 0xEF, 0x7B, 0x68, 0xF9, 0x7B, 0x4B, 0x86, 0x66, 0xD7,
	0xE2, 0x98, 0xA2, 0xF8, 0x8A, 0xD2, 0xFE, 0xC0, 0xC6, 0xBC, 0x99, 0x32, 0xBD, 0xF9, 0x13, 0x7F,
	0x46, 0x52, 0x75, 0x9B, 0xCA, 0x82, 0x81, 0x3F, 0xE2, 0x02, 0x36, 0x38, 0xD5, 0x77, 0x58, 0x4E,
	0x28, 0xB2, 0x4B, 0x59, 0x01, 0x53, 0x2B, 0xFD, 0xC5, 0xD5, 0xBE, 0xE1, 0xF7, 0xF7, 0x89, 0x02,
	0xD9, 0xFA, 0xA6, 0x99, 0x58, 0x33, 0x7A, 0x9E, 0x46, 0xCC, 0xAC, 0xA3, 0x44, 0x10, 0x18, 0x94,
	0x05, 0x38, 0x72, 0x2F, 0x5C, 0xCF, 0x36, 0x1F, 0xED, 0x09, 0xF8, 0x77, 0xAC, 0x68, 0xBB, 0x9F,
	0xA9, 0x81, 0x9F, 0xAE, 0x46, 0xE3, 0x22, 0xA7, 0xCF, 0x02, 0x70, 0x53, 0x69, 0x57, 0x05, 0x1F,
	0x1B, 0xCE, 0xBB, 0xC4, 0x68, 0x4C, 0xD8, 0x7C, 0xAF, 0xD8, 0x69, 0xCD, 0x52, 0x0D, 0x3A, 0x9A,
	0x08, 0x84, 0x66, 0xEB, 0xC9, 0x91, 0x33, 0x37, 0xF9, 0xB0, 0x92, 0x1D, 0xD9, 0x70, 0xED, 0x28,
	0xCE, 0xBD, 0xA8, 0x8F, 0x02, 0x27, 0xB2, 0xE2, 0xA2, 0x39, 0x60, 0xFF, 0x7D, 0xD4, 0x85, 0x49,
	0xCC
]);

const decrypted = decrypt3DS(encrypted, BOSS_3DS_AES_KEY);

assert.equal(decrypted.hash_type, expected.hash_type, `Decrypted hash type does not match. Expected ${expected.hash_type}. Got ${decrypted.hash_type}`);
assert.equal(decrypted.serial_number, expected.serial_number, `Decrypted serial number does not match. Expected ${expected.serial_number}. Got ${decrypted.serial_number}`);
assert.ok(expected.iv.equals(decrypted.iv), `Invalid IV. Expected\n\n${expected.iv.toString('hex')}\n\nGot\n\n${decrypted.iv.toString('hex')}`);
assert.equal(decrypted.flags, expected.flags, `Invalid flags. Expected\n\n${expected.flags}\n\nGot\n\n${decrypted.flags}`);
assert.ok(expected.content_header_hash.equals(decrypted.content_header_hash), `Invalid content header hash. Expected\n\n${expected.content_header_hash.toString('hex')}\n\nGot\n\n${decrypted.content_header_hash.toString('hex')}`);
assert.ok(expected.content_header_hash_signature.equals(decrypted.content_header_hash_signature), `Invalid content header hash signature. Expected\n\n${expected.content_header_hash_signature.toString('hex')}\n\nGot\n\n${decrypted.content_header_hash_signature.toString('hex')}`);
assert.equal(decrypted.payload_contents.length, expected.payload_contents_length, `Invalid payload contents length. Expected\n\n${expected.payload_contents_length}\n\nGot\n\n${decrypted.payload_contents.length}`);

const payload = decrypted.payload_contents[0];

assert.ok(expected.payload_content_header_hash.equals(payload.payload_content_header_hash), `Invalid payload header hash. Expected\n\n${expected.payload_content_header_hash.toString('hex')}\n\nGot\n\n${payload.payload_content_header_hash.toString('hex')}`);
assert.ok(expected.payload_content_header_hash_signature.equals(payload.payload_content_header_hash_signature), `Invalid payload header hash signature. Expected\n\n${expected.payload_content_header_hash_signature.toString('hex')}\n\nGot\n\n${payload.payload_content_header_hash_signature.toString('hex')}`);
assert.equal(payload.program_id, expected.program_id, `Decrypted program (title) ID does not match. Expected ${expected.program_id}. Got ${payload.program_id}`);
assert.equal(payload.content_datatype, expected.content_datatype, `Decrypted data type does not match. Expected ${expected.content_datatype}. Got ${payload.content_datatype}`);
assert.equal(payload.ns_data_id, expected.ns_data_id, `Decrypted NS data ID does not match. Expected ${expected.ns_data_id}. Got ${payload.ns_data_id}`);
assert.ok(expected.content.equals(payload.content), `Invalid decrypted content. Expected\n\n${expected.content.toString('hex')}\n\nGot\n\n${payload.content.toString('hex')}`);
